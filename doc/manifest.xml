<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE doc SYSTEM "manifest.dtd">
<doc>
    <!-- System-wide variables  -->
    <variable-list>
        <variable key="project">pgBackRest</variable>
        <variable key="project-tagline">Reliable PostgreSQL Backup &amp; Restore</variable>
        <variable key="version" eval="y">use pgBackRestDoc::ProjectInfo; PROJECT_VERSION</variable>
        <variable key="version-stable" eval="y">
            use pgBackRestDoc::Custom::DocCustomRelease;

            (new pgBackRestDoc::Custom::DocCustomRelease(
                new pgBackRestDoc::Common::Doc("{[doc-path]}/xml/release.xml")))->currentStableVersion();
        </variable>
        <variable key="project-exe">pgbackrest</variable>
        <variable key="project-url-root">/</variable>
        <variable key="postgres">PostgreSQL</variable>
        <variable key="dash">-</variable>
        <variable key="project-logo">logo.png</variable>
        <variable key="project-favicon">favicon.png</variable>

        <!-- Is this a development or debug build of the docs? -->
        <variable key="dev">n</variable>
        <variable key="debug">n</variable>

        <!-- Add analytics to the HTML documentation? -->
        <variable key="analytics">n</variable>

        <!-- Release date - static allows for reproducible builds -->
        <variable key="release-date-static">n</variable>
        <variable key="release-date" eval="y">
            use Time::Local;
            use pgBackRestDoc::Custom::DocCustomRelease;

            my ($second, $minute , $hour, $mday, $month, $year) = localtime();
            $year += 1900;

            if ('{[release-date-static]}' eq 'y')
            {
                my $strDate = (new pgBackRestDoc::Custom::DocCustomRelease(
                    new pgBackRestDoc::Common::Doc("{[doc-path]}/xml/release.xml")))->releaseLast()->paramGet('date');

                if ($strDate eq 'XXXX-XX-XX')
                {
                    confess &amp;log(ERROR, 'not possible to use static release dates on a dev build');
                }
                else
                {
                    ($year, $month, $mday) = split(/[\s.\-]+/, $strDate);
                    $month -= 1;
                }
            }

            my @stryMonth = ('January', 'February', 'March', 'April', 'May', 'June',
                             'July', 'August', 'September', 'October', 'November', 'December');

            $stryMonth[$month] . ' ' . $mday . ', ' . $year;
        </variable>

        <!-- HTML variables  -->
        <variable key="html-footer" eval='y'>
            'Copyright &amp;copy; 2015' . '-' . substr('{[release-date]}', length('{[release-date]}') - 4) .
            ', The PostgreSQL Global Development Group, &lt;a href="{[github-url-license]}">MIT License&lt;/a>.  Updated ' .
            '{[release-date]}';
        </variable>
        <!-- <variable key="html-logo">&lt;img src=&quot;{[project-logo]}&quot;&gt;</variable> -->

        <!-- PDF variables  -->
        <variable key="pdf-logo">{[doc-path]}/output/latex/logo</variable>

        <variable key="pdf-title1">{[project]} User Guide</variable>
        <variable key="pdf-title2">Open Source PostgreSQL Backup and Restore Utility</variable>
        <variable key="pdf-title3">Version {[version]}</variable>

        <variable key="pdf-organization">Crunchy Data Solutions, Inc.</variable>
        <variable key="pdf-resource-logo">cds-logo.eps</variable>

        <variable key='pdf-footer-left'>{[pdf-title1]}\\{[pdf-title3]}</variable>
        <variable key='pdf-footer-center'>\ \\-\ \thepage\ -</variable>
        <variable key='pdf-footer-right'>{[pdf-organization]}\\\today</variable>

        <variable key="pdf-file">CrunchyBackRest-UserGuide-{[version]}</variable>
    </variable-list>

    <source-list>
        <source key="index"/>
        <source key="user-guide-index"/>
        <source key="user-guide"/>
        <source key="help" type="custom"/>
        <source key="release" type="custom"/>
        <source key="faq"/>
        <source key="metric"/>
        <source key="coding"/>
        <source key="contributing"/>
        <source key="documentation"/>
    </source-list>

    <render-list>
        <render type="html">
            <render-source key="index" menu="Home"/>
            <render-source key="user-guide-index" menu="User Guides"/>
            <render-source key="user-guide"/>
            <render-source key="release" menu="Releases"/>
            <render-source key="configuration" source="help" menu="Configuration"/>
            <render-source key="command" source="help" menu="Commands"/>
            <render-source key="faq" menu="FAQ"/>
            <render-source key="metric" menu="Metrics"/>
        </render>

        <render type="pdf" file="{[pdf-file]}">
            <render-source key="user-guide"/>
        </render>

        <render type="markdown">
            <render-source key="index" file="../../../README.md"/>
            <render-source key="coding" file="../../../CODING.md"/>

            <!--
                Building the contributing document has some special requirements because it runs Docker in Docker so the repo path
                must align on the host and all Docker containers.  Run `pgbackrest/doc/doc.pl` from within the home directory of
                the user that will do the doc build, e.g. `home/vagrant`.  If the repo is not located directly in the home
                directory, e.g. `/home/vagrant/pgbackrest`, then a symlink may be used,
                e.g. `ln -s /path/to/repo /home/vagrant/pgbackrest`.
            -->
            <render-source key="contributing" file="../../../CONTRIBUTING.md"/>
            <render-source key="documentation" file="../../README.md"/>
        </render>
    </render-list>
</doc>
