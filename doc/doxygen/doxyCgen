#!/bin/bash
THIS_DIR=$(dirname $0)
set -o pipefail -e
####################################################################################################################################
# Create doxygen documentation from non-annotated C files
#    doxyCgen  <input directory>  <output directory>  <doxyCfilter optional>
#      <input directory> - where the C source tree is located
#      <output directory> - where doxygen documentation is created.
#      <doxyCfilter> - (optional) path to where the doxyCfilter resides or should be created.
#      $PROJECT_NAME - environment variable passed on to doxygan
#      $PROJECT_BRIEF - brief description passed on to doxygen
####################################################################################################################################
main() # <args>
{
    # Setup the global environment variables.
    setupEnv "$@"

    # Create the output directory if it doesn't already exist.
    mkdir -p "$OUTPUT_DIRECTORY"

    # Build the C doxygen filter if need be. C_FILTER is the path to the binary.
    C_FILTER=$(buildDoxyFilter "$C_FILTER")

    # Generate doxygen documentation using the Doxyfile in this script directory.
    doxygen "$THIS_DIR/Doxyfile" || abort "Install doxygen and try again"
}

####################################################################################################################################
# Setup the environment variables passed to doxygen
####################################################################################################################################
setupEnv() # <args>
{
  # Environment variables used for doxygen configuration. See Doxyfile for valid substitutions.
  export INPUT=${1:-.}                                              # input directory defaults to CWD
  export OUTPUT_DIRECTORY=${2:-.}                                   # output directory defaults to CWD
  export C_FILTER=${3:-''}                                 l        # if empty, will be updated later.

  # Would prefer to pass PROJECT_NAME and PROJECT_BRIEF through environment variables, but will accept as arguments.
  #   This is a workaround for earlier versions of meson which can't set environment variables.
  export PROJECT_NAME=${PROJECT_NAME:-${4:-''}}
  export PROJECT_BRIEF=${PROJECT_BRIEF:-${5:-''}}
}

#######################################################################################################s#############################
# Build the doxyCfilter for adding doxygen annotations to C code
#      buildDoxyFilter  <path to filter>
#            <path to filter> - where the filter exists, or where it should be built if it doesn't exist.
#
# if the path to the filter is not specified,
# - see if it is on the PATH
# - see if it is installed in the same directory as this script
# - build it in the doxugen output directory alongside the html output.
####################################################################################################################################
buildDoxyFilter() # <path to filter>
{
    local filter="$1"

    # No filter specified, see if it is on the path.
    if [[ "$filter" == "" ]]; then
      filter=$(which doxyCfilter)
    fi

    # Still no filter, see if it was installed in same directory as this script.
    if [[ "$filter" == "" && -x "$THIS_DIR/doxyCfilter" ]]; then
      filter="$THIS_DIR/doxyCfilter"
    fi

    # If still no filter, prepare to build it in the output directory.
    if [[ "$filter" == "" ]]; then
      filter="$OUTPUT_DIRECTORY/doxyCfilter"
    fi

  # If the filter doesn't already exist, build it.
  if [ ! -x "$filter" ]; then
    flex -o "$OUTPUT_DIRECTORY/doxyCfilter.c" "$THIS_DIR/doxyCFilter.l"  || abort "Install flex and try again"
    cc "$OUTPUT_DIRECTORY/doxyCfilter.c" -lfl -o "$filter"               || abort "Unable to build doxyCfilter. Is 'cc' installed?"
  fi

  # Return the location of the filter.
  echo "$filter"
}

####################################################################################################################################
# display a message and quit
####################################################################################################################################
abort() # <message>
{
  echo "$@" >&2
  exit 1
}

main "$@"
