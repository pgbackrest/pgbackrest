#!/bin/bash -x
THIS_DIR=$(dirname $0)

# Environment variables used for doxygen configuration.
export INPUT=${1:-$THIS_DIR}
export OUTPUT_DIRECTORY=${2:-$THIS_DIR}
export C_FILTER=${3:-''}

# set these before calling this script
export PROJECT_NAME=${PROJECT_NAME:-''}
export PROJECT_BRIEF=${PROJECT_BRIEF:-''}

####################################################################################################################################
# Create doxygen documentation from non-annotated C files
#    doxyCgen  <input directory>  <output directory>  <doxyCfilter optional>
#      <input directory> - where the C source tree is located
#      <output directory> - where doxygen documentation is created.
#      <doxyCfilter> - (optional) path to where the doxyCfilter resides or should be created.
#      $PROJECT_NAME - included in doxygen docs
#      $PROJECT_BRIEF - brief description of project included in doxygen docs
####################################################################################################################################
main() # <args>
{
    # Build the C doxygen filter if need be. C_FILTER is the path to the binary, if we have one.
    C_FILTER=$(buildDoxyFilter "$C_FILTER")

    # Generate the doxygen documentation using the Doxyfile in the current directory.
    doxygen "$THIS_DIR/Doxyfile"
}

#######################################################################################################s#############################
# Build the doxyCfilter for adding doxygen annotations to C code
#      buildDoxyFilter  <path to filter>
#            <path to filter> - where the filter exists, or where it should be built if it doesn't exist.
#                               if not specified, will check PATH and try the source and output directories.
####################################################################################################################################
buildDoxyFilter() # <path to filter>
{
    local filter="$1"

    # Figure out where the doxyCgen filter is or where it should go.
    if [[ "$filter" == "" ]]; then
      filter=$(which doxyCfilter)
    fi

    if [[ "$filter" == "" && -x "$THIS_DIR/doxyCfilter" ]]; then
      filter="$THIS_DIR/doxyCfilter"
    fi
    
    if [[ "$filter" == "" ]]; then
      filter="$OUTPUT_DIRECTORY/doxyCfilter"
    fi

  # If the filter doesn't already exist, build it in the requested location  ($filter)
  if [ ! -x "$filter" ]; then
    flex -o "$OUTPUT_DIRECTORY/doxyCfilter.c" "$THIS_DIR/doxyCFilter.l"
    cc "$OUTPUT_DIRECTORY/doxyCfilter.c" -lfl -o "$filter"
  fi

  echo $filter
}


main "$@"
